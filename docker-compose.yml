version: "3.7"

name: bar

services:
  gateway:
    container_name: bar.gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    networks:
      - bar_network
    ports:
      - 5010:80
    volumes:
      - ~/.vsdbg:/remote_debugger/
    labels:
      - SERVICE_CHECK_HTTP=/health
      - SERVICE_CHECK_INTERVAL=20s
      - SERVICE_NAME=gateway
    depends_on:
      - grafana

  brand:
    build:
      context: ./brand.service
      dockerfile: Dockerfile
    networks:
      - bar_network
    ports:
      - 5011:80
    labels:
      - SERVICE_CHECK_HTTP=/health
      - SERVICE_CHECK_INTERVAL=20s
      - SERVICE_NAME=brand.service
    volumes:
      - ~/.vsdbg:/remote_debugger/
    depends_on:
      - postgres
      - grafana

  consul:
    container_name: bar.consul
    image: consul:1.15.4
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    ports:
      - 8500:8500
    networks:
      - bar_network

  consul-registrator:
    container_name: bar.consul.registrator
    image: gliderlabs/registrator:master
    command: "-explicit=true -internal=true consul://consul:8500"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - bar_network
    depends_on:
      - consul

  postgres:
    container_name: bar.postgres
    image: polaris/postgres:local
    build:
      context: ./postgres
      dockerfile: Dockerfile
    networks:
      - bar_network
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=default_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - ./postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
      - postgres_db:/var/lib/postgresql/data

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    command: [ "--config=/etc/collector.yaml" ]
    networks:
      - bar_network
    ports:
      - 8888:8888 
      - 8889:8889 
      - 13133:13133
      - 4317:4317
    volumes:
      - ./otel/otel-collector-config.yml:/etc/collector.yaml
    depends_on:
      - tempo

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    networks:
      - bar_network
    volumes:
      - ./tempo/tempo.yml:/etc/tempo.yaml

  grafana:
    image: grafana/grafana:10.0.2
    container_name: grafana
    networks:
      - bar_network
    ports:
      - 3000:3000
    volumes:
      - ./grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
      - collector
      - tempo

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - bar_network
    ports:
      - 9090:9090
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0     
    container_name: cadvisor
    networks:
      - bar_network
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.5.0
    container_name: node_exporter
    command: "--path.rootfs=/host"
    networks:
      - bar_network
    pid: host
    volumes:
      - /:/host:ro,rslave

  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - bar_network

  # kafka:
  #   image: wurstmeister/kafka
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_CREATE_TOPICS: "baeldung:1:1"
  #   networks:
  #     - bar_network

  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - 8080:8080
  #   environment:
  #     DYNAMIC_CONFIG_ENABLED: 'true'
  #   networks:
  #     - bar_network
      
volumes:
  postgres_db:
  prometheus-data:
    driver: local

networks:
  bar_network:

